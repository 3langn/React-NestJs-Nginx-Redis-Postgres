version: "3"

services:
  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - node-app1
      - node-app2
    networks:
      - mynetwork

  redis:
    hostname: redis
    container_name: redis
    image: redis:6-alpine
    expose:
      - 6379
    restart: always
    environment:
      - REDIS_PORT=6379
      - REDIS_HOST=redis
    networks:
      - mynetwork

  node-app1:
    image: node-app
    container_name: server-1
    build: ./nestjs
    env_file:
      - ./nestjs/.env
    volumes:
      - ./nestjs:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      DB_HOST: postgresql-master
      DB_READ_HOST1: postgresql-slave1
      DB_READ_HOST2: postgresql-slave2
      REDIS_HOST: redis
      REDIS_PORT: 6379
      PORT: 2222
      NODE_ENV: "production"
    depends_on:
      - postgresql-master
      - postgresql-slave1
      - postgresql-slave2
      - redis
    command: npm run start:dev
    networks:
      - mynetwork

  node-app2:
    image: node-app
    container_name: server-2
    build: ./nestjs
    env_file:
      - ./nestjs/.env
    volumes:
      - ./nestjs:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      DB_HOST: postgresql-master
      DB_READ_HOST1: postgresql-slave1
      DB_READ_HOST2: postgresql-slave2
      REDIS_HOST: redis
      REDIS_PORT: 6379
      PORT: 3333
      NODE_ENV: "production"
    depends_on:
      - postgresql-master
      - postgresql-slave1
      - postgresql-slave2
      - redis
    command: npm run start:dev
    networks:
      - mynetwork

  frontend:
    image: frontend
    container_name: frontend
    build: ./reactjs
    ports:
      - 3000:3000
    env_file:
      - ./reactjs/.env
    volumes:
      - ./reactjs:/usr/src/app
      - /usr/src/app/node_modules
    command: npm start
    environment:
      - BACKEND_HOST=node-app2
    networks:
      - mynetwork

  postgresql-master:
    image: docker.io/bitnami/postgresql:11
    container_name: pg-master
    ports:
      - 5435:5432
    volumes:
      - "postgresql_master_data:/bitnami/postgresql"
    environment:
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_password
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=my_password
      - POSTGRESQL_DATABASE=my_database
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - mynetwork

  postgresql-slave1:
    image: docker.io/bitnami/postgresql:11
    container_name: pg-slave1
    ports:
      - 5433:5432
    depends_on:
      - postgresql-master
    environment:
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_password
      - POSTGRESQL_MASTER_HOST=postgresql-master
      - POSTGRESQL_PASSWORD=my_password
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - mynetwork

  postgresql-slave2:
    image: docker.io/bitnami/postgresql:11
    container_name: pg-slave2
    ports:
      - 5434:5432
    depends_on:
      - postgresql-master
    environment:
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_password
      - POSTGRESQL_MASTER_HOST=postgresql-master
      - POSTGRESQL_PASSWORD=my_password
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - mynetwork

networks:
  mynetwork:

volumes:
  postgresql_master_data:
    driver: local
